import telebot
import os
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv
import random
from telebot import types
import time
import requests


load_dotenv()

bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}


def get_db_connection():
    #–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    return psycopg2.connect(
        host=os.getenv('DB_HOST'),
        database=os.getenv('DB_NAME'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        port=os.getenv('DB_PORT'),
        cursor_factory=RealDictCursor
    )


def add_user(telegram_id, name):
    #–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute(
            "INSERT INTO users (telegram_id, name) VALUES (%s, %s) ON CONFLICT (telegram_id) DO NOTHING;",
            (telegram_id, name)
        )
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        cur.close()
        conn.close()


def get_user_id(telegram_id):
    #–ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ telegram_id
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
        result = cur.fetchone()
        return result['id'] if result else None
    finally:
        cur.close()
        conn.close()


def get_random_word(telegram_id):
    #–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ –æ–±—â–∏—Ö –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö)
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        user_id = get_user_id(telegram_id)
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("""
            SELECT * FROM (
                SELECT id, english_text, translation, 'common' as source FROM common_words
                UNION
                SELECT id, english_text, translation, 'user' as source FROM user_words WHERE user_id = %s
            ) AS all_words
            ORDER BY RANDOM()
            LIMIT 1
        """, (user_id,))
        return cur.fetchone()
    finally:
        cur.close()
        conn.close()


def get_wrong_answers(correct_translation, limit=3):
    #–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("""
            SELECT translation FROM (
                SELECT translation FROM common_words WHERE translation != %s
                UNION
                SELECT translation FROM user_words WHERE translation != %s
            ) AS all_translations
        """, (correct_translation, correct_translation))
        
        all_answers = [row['translation'] for row in cur.fetchall()]
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤ Python
        unique_answers = list(set(all_answers))
        random.shuffle(unique_answers)
        return unique_answers[:limit]
    finally:
        cur.close()
        conn.close()


def save_user_progress(telegram_id, word_data, is_correct):
    #–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        user_id = get_user_id(telegram_id)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —Ç–µ–∫—Å—Ç–æ–º —Å–ª–æ–≤–∞ –≤–º–µ—Å—Ç–æ ID
        cur.execute(
            """INSERT INTO user_progress (user_id, word_english, word_translation, is_correct) 
               VALUES (%s, %s, %s, %s)""",
            (user_id, word_data['english_text'], word_data['translation'], is_correct)
        )
        conn.commit()
        print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {word_data['english_text']} - {is_correct}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    finally:
        cur.close()
        conn.close()


def add_user_word(telegram_id, english_text, translation, example=None):
    #–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        user_id = get_user_id(telegram_id)
        cur.execute(
            """INSERT INTO user_words (user_id, english_text, translation, example) 
               VALUES (%s, %s, %s, %s)
               ON CONFLICT (user_id, english_text) DO NOTHING""",
            (user_id, english_text, translation, example)
        )
        conn.commit()
        return cur.rowcount > 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        return False
    finally:
        cur.close()
        conn.close()


def get_user_words_count(telegram_id):
    #–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—â–∏–µ + –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ)
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        user_id = get_user_id(telegram_id)
        cur.execute("""
            SELECT 
                (SELECT COUNT(*) FROM common_words) + 
                (SELECT COUNT(*) FROM user_words WHERE user_id = %s) as total
        """, (user_id,))
        result = cur.fetchone()
        return result['total'] if result else 0
    finally:
        cur.close()
        conn.close()


def get_user_words(telegram_id):
    #–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        user_id = get_user_id(telegram_id)
        cur.execute(
            "SELECT id, english_text, translation FROM user_words WHERE user_id = %s",
            (user_id,)
        )
        return cur.fetchall()
    finally:
        cur.close()
        conn.close()


def delete_user_word(telegram_id, word_id):
    #–£–¥–∞–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        user_id = get_user_id(telegram_id)
        cur.execute(
            "DELETE FROM user_words WHERE id = %s AND user_id = %s",
            (word_id, user_id)
        )
        conn.commit()
        return cur.rowcount > 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        return False
    finally:
        cur.close()
        conn.close()


@bot.message_handler(commands=['start'])
def start(message):
    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    add_user(message.from_user.id, user_name)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üìö –£—á–∏—Ç—å —Å–ª–æ–≤–∞', '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
    markup.row('üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. "
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å –∏—Ö –ø–µ—Ä–µ–≤–æ–¥.\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "üìö *–£—á–∏—Ç—å —Å–ª–æ–≤–∞* - —è –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞, –∞ —Ç—ã –≤—ã–±–∏—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥\n"
        "‚ûï *–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ* - —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n"
        "üóë *–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ* - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –¥–æ–±–∞–≤–∏–ª\n"
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )
    
    bot.send_message(
        message.chat.id, 
        welcome_text, 
        reply_markup=markup,
        parse_mode='Markdown'
    )


@bot.message_handler(func=lambda message: message.text == 'üìö –£—á–∏—Ç—å —Å–ª–æ–≤–∞')
def learn_words(message):
    #–ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    word = get_random_word(message.from_user.id)
    if not word:
        bot.send_message(message.chat.id, "–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[message.from_user.id] = {
        'action': 'learning',
        'word': word,
        'attempts': 0
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —Å–º–µ—à–∏–≤–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
    wrong_answers = get_wrong_answers(word['translation'])
    all_answers = wrong_answers + [word['translation']]
    random.shuffle(all_answers)
    
    # –õ–æ–≥–∏
    print(f"Word: {word['english_text']} -> {word['translation']}")
    print(f"All answers: {all_answers}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    markup = types.InlineKeyboardMarkup(row_width=2)
    for answer in all_answers:
        markup.add(types.InlineKeyboardButton(answer, callback_data=f"answer_{answer}"))
    
    bot.send_message(
        message.chat.id,
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ:\n\nüî§ *{word['english_text']}*",
        reply_markup=markup,
        parse_mode='Markdown'
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def handle_answer(call):
    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    user_id = call.from_user.id
    
    if user_id not in user_states or user_states[user_id]['action'] != 'learning':
        bot.answer_callback_query(call.id, "–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É!")
        return
    
    selected_answer = call.data.replace('answer_', '')
    correct_answer = user_states[user_id]['word']['translation']
    user_states[user_id]['attempts'] += 1
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"Selected: '{selected_answer}', Correct: '{correct_answer}', Equal: {selected_answer == correct_answer}")
    
    if selected_answer == correct_answer:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        bot.edit_message_text(
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! *{user_states[user_id]['word']['english_text']}* - —ç—Ç–æ *{correct_answer}*",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        save_user_progress(user_id, user_states[user_id]['word'], True)
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚û°Ô∏è", callback_data="next_word"))
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∏–º?", reply_markup=markup)
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if user_states[user_id]['attempts'] < 3:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", show_alert=True)
        else:
            # –ü–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            bot.edit_message_text(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{user_states[user_id]['word']['english_text']}* - *{correct_answer}*",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown'
            )
            save_user_progress(user_id, user_states[user_id]['word'], False)
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚û°Ô∏è", callback_data="next_word"))
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∏–º?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "next_word")
def next_word(call):
    #–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
    bot.delete_message(call.message.chat.id, call.message.message_id)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    word = get_random_word(call.from_user.id)
    if not word:
        bot.send_message(call.message.chat.id, "–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[call.from_user.id] = {
        'action': 'learning',
        'word': word,
        'attempts': 0
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —Å–º–µ—à–∏–≤–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
    wrong_answers = get_wrong_answers(word['translation'])
    all_answers = wrong_answers + [word['translation']]
    random.shuffle(all_answers)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    markup = types.InlineKeyboardMarkup(row_width=2)
    for answer in all_answers:
        markup.add(types.InlineKeyboardButton(answer, callback_data=f"answer_{answer}"))
    
    bot.send_message(
        call.message.chat.id,
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ:\n\nüî§ *{word['english_text']}*",
        reply_markup=markup,
        parse_mode='Markdown'
    )


@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
def add_word_start(message):
    #–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    user_states[message.from_user.id] = {'action': 'adding_word', 'step': 'english'}
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('‚ùå –û—Ç–º–µ–Ω–∞')
    
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == 'üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ')
def delete_word_start(message):
    #–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    words = get_user_words(message.from_user.id)
    
    if not words:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.")
        return
    
    markup = types.InlineKeyboardMarkup()
    for word in words:
        markup.add(types.InlineKeyboardButton(
            f"üóë {word['english_text']} - {word['translation']}",
            callback_data=f"delete_{word['id']}"
        ))
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def handle_delete(call):
    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    word_id = int(call.data.replace('delete_', ''))
    
    if delete_user_word(call.from_user.id, word_id):
        bot.edit_message_text(
            "‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
            call.message.chat.id,
            call.message.message_id
        )
    else:
        bot.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.",
            call.message.chat.id,
            call.message.message_id
        )


@bot.message_handler(func=lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def show_statistics(message):
    #–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        user_id = get_user_id(message.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cur.execute("""
            SELECT 
                COUNT(*) as total_attempts,
                COUNT(CASE WHEN is_correct THEN 1 END) as correct_answers,
                COUNT(DISTINCT word_english) as unique_words
            FROM user_progress
            WHERE user_id = %s
        """, (user_id,))
        
        stats = cur.fetchone()
        total_words = get_user_words_count(message.from_user.id)
        
        if stats['total_attempts'] > 0:
            accuracy = (stats['correct_answers'] / stats['total_attempts']) * 100
        else:
            accuracy = 0
        
        text = (
            f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
            f"üìö –í—Å–µ–≥–æ —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: {total_words}\n"
            f"‚úçÔ∏è –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {stats['total_attempts']}\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct_answers']}\n"
            f"üìà –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%\n"
            f"üéØ –ò–∑—É—á–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {stats['unique_words']}"
        )
        
        bot.send_message(message.chat.id, text, parse_mode='Markdown')
        
    finally:
        cur.close()
        conn.close()


@bot.message_handler(func=lambda message: message.text == '‚ùå –û—Ç–º–µ–Ω–∞')
def cancel_action(message):
    #–û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if message.from_user.id in user_states:
        del user_states[message.from_user.id]
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üìö –£—á–∏—Ç—å —Å–ª–æ–≤–∞', '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
    markup.row('üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    
    bot.send_message(
        message.chat.id,
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    user_id = message.from_user.id
    
    if user_id not in user_states:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('üìö –£—á–∏—Ç—å —Å–ª–æ–≤–∞', '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
        markup.row('üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=markup
        )
        return
    
    state = user_states[user_id]
    
    if state['action'] == 'adding_word':
        if state['step'] == 'english':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–µ–≤–æ–¥—É
            state['english'] = message.text.strip()
            state['step'] = 'translation'
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:")
            
        elif state['step'] == 'translation':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∏–º–µ—Ä—É
            state['translation'] = message.text.strip()
            state['step'] = 'example'
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∞')
            
            bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
                reply_markup=markup
            )
            
        elif state['step'] == 'example':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω) –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ
            example = None if message.text == '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else message.text.strip()
            
            if add_user_word(user_id, state['english'], state['translation'], example):
                total_words = get_user_words_count(user_id)
                
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.row('üìö –£—á–∏—Ç—å —Å–ª–æ–≤–∞', '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
                markup.row('üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
                
                bot.send_message(
                    message.chat.id,
                    f"‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –∏–∑—É—á–∞–µ—Ç–µ {total_words} —Å–ª–æ–≤.",
                    reply_markup=markup
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                )
            
            del user_states[user_id]


if __name__ == '__main__':
    print(" [INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)

    while True:
        try:
            bot.polling(none_stop=True, timeout=60)
        except requests.exceptions.ReadTimeout:
            print(" [WARNING] Timeout –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram API. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except requests.exceptions.ConnectionError:
            print(" [WARNING] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)
        except Exception as e:
            print(f" [ERROR] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥...")
            time.sleep(20)